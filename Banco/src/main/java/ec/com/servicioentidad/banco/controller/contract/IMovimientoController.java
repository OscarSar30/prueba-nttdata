/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.25).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package ec.com.servicioentidad.banco.controller.contract;

import javax.validation.Valid;

import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import ec.com.servicioentidad.banco.dto.MovimientosDTO;
import ec.com.servicioentidad.banco.dto.RespuestaDTO;
import ec.com.servicioentidad.banco.enums.TipoMovimientoEnum;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-04-05T16:08:17.424-05:00[America/Bogota]")
@Validated
public interface IMovimientoController {
	

	/**
	 * Método PUT para la actualización de movimiento
	 * @param body
	 * @return
	 */
    @Operation(summary = "Actualizar movimiento", description = "Actualizar movimiento", tags={ "Movimientos" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Updated", content = @Content(schema = @Schema(implementation = RespuestaDTO.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(schema = @Schema(implementation = RespuestaDTO.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(schema = @Schema(implementation = RespuestaDTO.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal Server Error", content = @Content(schema = @Schema(implementation = RespuestaDTO.class))) })
    @RequestMapping(value = "/movimientos",
        produces = "application/json; charset=UTF-8", 
        consumes = "application/json; charset=UTF-8",
        method = RequestMethod.PUT)
    ResponseEntity<?> actualizarMovimiento(@Parameter(in = ParameterIn.DEFAULT, description = "Movimiento", required=true, schema=@Schema()) @Valid @RequestBody MovimientosDTO body);


    /**
     * Método GET para consultar movimientos por número de cuenta
     * @param identificacion
     * @return
     */
    @Operation(summary = "Consultar movimientos por número de cuenta", description = "Consultar movimientos por número de cuenta", tags={ "Movimientos" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(array = @ArraySchema(schema = @Schema(implementation = MovimientosDTO.class)))),
        
        @ApiResponse(responseCode = "204", description = "No Content", content = @Content(schema = @Schema(implementation = RespuestaDTO.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(schema = @Schema(implementation = RespuestaDTO.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal Server Error", content = @Content(schema = @Schema(implementation = RespuestaDTO.class))) })
    @RequestMapping(value = "/movimientos/numero/{numeroCuenta}",
        produces = "application/json; charset=UTF-8", 
        method = RequestMethod.GET)
    ResponseEntity<?> consultarMovimientosPorNumeroCuenta(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("numeroCuenta") String numeroCuenta);

    
    /**
     * Método GET para consultar movimientos por tipo de movimiento
     * @param identificacion
     * @return
     */
    @Operation(summary = "Consultar movimientos por tipo de movimiento", description = "Consultar movimientos por tipo de movimiento", tags={ "Movimientos" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(array = @ArraySchema(schema = @Schema(implementation = MovimientosDTO.class)))),
        
        @ApiResponse(responseCode = "204", description = "No Content", content = @Content(schema = @Schema(implementation = RespuestaDTO.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(schema = @Schema(implementation = RespuestaDTO.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal Server Error", content = @Content(schema = @Schema(implementation = RespuestaDTO.class))) })
    @RequestMapping(value = "/movimientos/cuenta/tipo/{numeroCuenta}/{tipoMovimiento}",
        produces = "application/json; charset=UTF-8", 
        method = RequestMethod.GET)
    ResponseEntity<?> consultarMovimientosPorCuentaTipoMovimiento(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("numeroCuenta") String numeroCuenta, @Parameter(in = ParameterIn.PATH, description = "Tipo Movimiento", required=true, schema=@Schema(allowableValues={ "RETIRO", "DEPOSITO" }
    		)) @PathVariable("tipoMovimiento") TipoMovimientoEnum tipoMovimiento);

    
    /**
     * Método POST para crear un nuevo movimiento
     * @param body
     * @return
     */
    @Operation(summary = "Crear nuevo movimiento", description = "Crear nuevo movimiento", tags={ "Movimientos" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "OK", content = @Content(schema = @Schema(implementation = RespuestaDTO.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(schema = @Schema(implementation = RespuestaDTO.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal Server Error", content = @Content(schema = @Schema(implementation = RespuestaDTO.class))) })
    @RequestMapping(value = "/movimientos",
        produces = "application/json; charset=UTF-8", 
        consumes = "application/json; charset=UTF-8",
        method = RequestMethod.POST)
    ResponseEntity<?> crearMovimiento(@Parameter(in = ParameterIn.DEFAULT, description = "Movimiento", required=true, schema=@Schema()) @Valid @RequestBody MovimientosDTO body);


    /**
     * Método DELETE para eliminar un movimiento del registro de base 
     * @param movimientoId
     * @return
     */
    @Operation(summary = "Eliminar movimiento por ID", description = "Eliminar movimiento por ID", tags={ "Movimientos" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(schema = @Schema(implementation = RespuestaDTO.class))),
        
        @ApiResponse(responseCode = "204", description = "No Content", content = @Content(schema = @Schema(implementation = RespuestaDTO.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(schema = @Schema(implementation = RespuestaDTO.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal Server Error", content = @Content(schema = @Schema(implementation = RespuestaDTO.class))) })
    @RequestMapping(value = "/movimientos/{idMovimiento}",
        produces = "application/json; charset=UTF-8", 
        method = RequestMethod.DELETE)
    ResponseEntity<?> eliminarMovimiento(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("idMovimiento") Integer idMovimiento);

}

